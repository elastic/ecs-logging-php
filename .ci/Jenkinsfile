#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-logging-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
        }
      }
    }
    stage('Parallel'){
      parallel {
        stage('Test-7.2') {
          steps {
            buildWithGitHubNotification('7.2-alpine')
          }
        }
        stage('Test-7.3') {
          agent { label 'linux && immutable' }
          steps {
            buildWithGitHubNotification('7.3-alpine')
          }
        }
        stage('Test-7') {
          agent { label 'linux && immutable' }
          steps {
            buildWithGitHubNotification('7.4-alpine')
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def build(version){
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
    try {
      docker.image("php:${version}").inside("-e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${WORKSPACE}/${BASE_DIR}") {
        sh(label: 'Install composer', script: '.ci/scripts/install-composer.sh')
        sh(label: 'Install dependencies', script: 'composer --no-progress --no-ansi install')
        sh(label: 'Run tests', script: "vendor/bin/paratest --log-junit=junit-${version}.xml")
      }
    } catch(e){
      error(e.toString())
    } finally {
      junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'junit-*.xml')
    }
  }
}

def buildWithGitHubNotification(version){
  withGithubNotify(context: "php-${version}") {
    build(version)
  }
}
