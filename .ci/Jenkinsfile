#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'linux && immutable' }
  environment {
    REPO = 'ecs-logging-php'
    BASE_DIR = "src/go.elastic.co/apm/${env.REPO}"
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    SLACK_CHANNEL = '#apm-agent-php'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*jenkins\\W+run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    stage('Checkout') {
      options { skipDefaultCheckout() }
      steps {
        pipelineManager([ cancelPreviousRunningBuilds: [ when: 'PR' ] ])
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}", githubNotifyFirstTimeContributor: true)
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    stage('Sanity checks') {
      options { skipDefaultCheckout() }
      steps {
        deleteDir()
        unstash 'source'
        dir("${BASE_DIR}"){
          preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
        }
      }
    }
    stage('Parallel'){
      parallel {
        stage('Test-7.2') {
          steps {
            buildWithGitHubNotification('7.2-alpine')
          }
        }
        stage('Test-7.3') {
          agent { label 'linux && immutable' }
          steps {
            buildWithGitHubNotification('7.3-alpine')
          }
        }
        stage('Test-7') {
          agent { label 'linux && immutable' }
          steps {
            buildWithGitHubNotification('7.4-alpine')
          }
        }
      }
    }
    stage('Release') {
      options {
        skipDefaultCheckout()
        timeout(time: 12, unit: 'HOURS')
      }
      when {
        beforeAgent true
        tag pattern: 'v\\d+.*', comparator: 'REGEXP'
      }
      agent { label 'docker && ubuntu-18.04 && immutable' }
      environment {
        RELEASE_URL_MESSAGE = "(<https://github.com/elastic/${env.REPO}/releases/tag/${env.TAG_NAME}|${env.TAG_NAME}>)"
      }
      stages {
        stage('Notify') {
          options { skipDefaultCheckout() }
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                         body: "Please (<${env.BUILD_URL}input|approve>) it or reject within 12 hours.\n Changes: ${env.TAG_NAME}")
          }
        }
        stage('Release CI') {
          options { skipDefaultCheckout() }
          steps {
            deleteDir()
            unstash 'source'
            dir("${BASE_DIR}") {
              withCredentials([string(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7', variable: 'GITHUB_TOKEN')]) {
                sh(script: 'make -f .ci/Makefile release', label: 'release')
              }
            }
          }
        }
      }
      post {
        failure {
          notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release *${env.TAG_NAME}* failed", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)")
        }
        success {
          notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release *${env.TAG_NAME}* published", body: "Build: (<${env.RUN_DISPLAY_URL}|here>)\nRelease URL: ${env.RELEASE_URL_MESSAGE}")
        }
        always {
          script {
            currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} released"
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult()
    }
  }
}

def build(version){
  deleteDir()
  unstash 'source'
  dir("${BASE_DIR}"){
    try {
      docker.image("php:${version}").inside("-e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${WORKSPACE}/${BASE_DIR}") {
        sh(label: 'Install composer', script: '.ci/scripts/install-composer.sh')
        sh(label: 'Install dependencies', script: 'composer --no-progress --no-ansi install')
        sh(label: 'Run tests', script: "VERSION=${version} composer test")
      }
    } catch(e){
      error(e.toString())
    } finally {
      junit(allowEmptyResults: true, keepLongStdio: true, testResults: 'junit-*.xml')
    }
  }
}

def buildWithGitHubNotification(version){
  withGithubNotify(context: "php-${version}") {
    build(version)
  }
}

def notifyStatus(def args = [:]) {
  slackSend(channel: env.SLACK_CHANNEL, color: args.slackStatus, message: "${args.subject}. ${args.body}",
            tokenCredentialId: 'jenkins-slack-integration-token')
  // transform slack URL format '(<URL|description>)' to 'URL'.
  def bodyEmail = args.body.replaceAll('\\(<', '').replaceAll('\\|.*>\\)', '')
  emailext(subject: args.subject, to: "${env.NOTIFY_TO}", body: bodyEmail)
}
